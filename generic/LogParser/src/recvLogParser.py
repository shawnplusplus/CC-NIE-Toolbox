#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""@package recvLogParser
Copyright (C) 2015 University of Virginia. All rights reserved.

file      recvLogParser.py
author    Shawn Chen <sc7cq@virginia.edu>
version   1.0
date      June 27, 2015

LICENSE

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or（at your option）
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details at http://www.gnu.org/copyleft/gpl.html

brief     parses log files generated by VCMTPv3 receivers
usage     python recvLogParser.py <logfile-to-read> <newfile-to-write>
"""


import re
import sys
import datetime


def checkTimeElapse(start, end):
    """Checks if the elapsed time is longer than 1 minute.

    Takes the start time and end time, checks if the elapsed time is longer
    than one minute. If so, returns True. Otherwise, returns False.

    Args:
        start: Start of the time, should be a datetime struct
        end  : End of the time, should be a datetime struct

    Returns:
        True : Elapsed time is longer than 1 minute.
        False: Elapsed time is shorter than 1 minute.
    """
    if end > start:
        over_one_min = (end - start) > datetime.timedelta(minutes = 1)
    else:
        over_one_min = (start - end) > datetime.timedelta(minutes = 1)

    return over_one_min


def main(filename, newfile):
    """Reads the raw log file and parses it.

    Reads the raw VCMTPv3 log file, parses each line and computes throughput,
    block-based retransmission rate and successfully received  products on a
    basis of 1 minute.

    Args:
        filename: Filename of the log file.
        newfile : Filename of the new file to contain output results.
    """
    f = open(filename, 'r')
    w = open(newfile, 'w+')
    for i, line in enumerate(f):
        match = re.search(r'^\d+-\d+-\d+ \d+:\d+:\d+  ', line)
        print match.group(0)
        eventtime = datetime.datetime.strptime(match.group(0),
                                               "%Y-%m-%d %H:%M:%S  ")
        mytime = datetime.datetime.strptime("2015-06-29 10:00:00",
                                               "%Y-%m-%d %H:%M:%S")
        if checkTimeElapse(eventtime, mytime):
            print 'True'

    """
    # parses the pattern but only takes the number
    sizes = re.findall(r'INFO:\s+(\d+)', f.read())
    for size in sizes:
        w.write(size + '\n')
    f.close()
    w.close()
    """


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
